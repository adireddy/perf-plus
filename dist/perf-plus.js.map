{
"version":3,
"file":"perf-plus.js",
"sourceRoot":"file:///",
"sources":["/usr/lib/haxe/std/js/_std/HxOverrides.hx","/haxe/perf-plus/src/PerfPlus.hx","/haxe/perf-plus/src/PerfUI.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn untyped undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif( pos != null && pos != 0 && len != null && len < 0 ) return \"\";\n\t\tif( len == null ) len = s.length;\n\t\tif( pos < 0 ){\n\t\t\tpos = s.length + pos;\n\t\t\tif( pos < 0 ) pos = 0;\n\t\t}else if( len < 0 ){\n\t\t\tlen = s.length + len - pos;\n\t\t}\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if !js_es5\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","import js.html.Window;\nimport web.Performance;\nimport js.Browser;\n\n@:expose class PerfPlus {\n\n\tpublic static var MEASUREMENT_INTERVAL:Int = 1000;\n\tpublic var currentFps:Float;\n\tpublic var currentMs:Float;\n\tpublic var currentMem:String;\n\tpublic var resourceCount:Int;\n\tpublic var loadDuration:Float;\n\n\tvar _time:Float;\n\tvar _startTime:Float;\n\tvar _prevTime:Float;\n\tvar _ticks:Int;\n\tvar _fpsMin:Float;\n\tvar _fpsMax:Float;\n\tvar _memCheck:Bool;\n\tvar _pos:String;\n\tvar _offset:Float;\n\n\tvar _perfObj:Performance;\n\tvar _memoryObj:MemoryInfo;\n\n\tvar _ui:PerfUI;\n\tvar _win:Window;\n\n\tpublic function new(?pos = \"TR\", ?offset:Float = 0) {\n\t\tcurrentFps = 0;\n\t\tcurrentMs = 0;\n\t\tcurrentMem = \"0\";\n\n\t\t_pos = pos;\n\t\t_offset = offset;\n\t\t_time = 0;\n\t\t_ticks = 0;\n\t\t_fpsMin = Math.POSITIVE_INFINITY;\n\t\t_fpsMax = 0;\n\t\t_startTime = _now();\n\t\t_prevTime = -MEASUREMENT_INTERVAL;\n\t}\n\n\tpublic function start(?win:Window) {\n\t\t_ui = new PerfUI();\n\t\tif (win == null) win = Browser.window;\n\t\t_win = win;\n\n\t\t_perfObj = cast _win.performance;\n\t\t_memoryObj = _perfObj.memory;\n\t\t_memCheck = (_perfObj != null && _memoryObj != null && _memoryObj.totalJSHeapSize > 0);\n\n\t\t_win.requestAnimationFrame(cast _tick);\n\n\t\tif (untyped __js__(\"window.performance\").getEntriesByType != null) {\n\t\t\t_ui.addResources(_perfObj.getEntriesByType(\"resource\"));\n\t\t\tresourceCount = _ui.resourceCount;\n\t\t\tloadDuration = _ui.loadDuration;\n\t\t}\n\t}\n\n\tinline function _now():Float {\n\t\treturn (_perfObj != null && _perfObj.now != null) ? _perfObj.now() : Date.now().getTime();\n\t}\n\n\tfunction _tick() {\n\t\tvar time = _now();\n\t\t_ticks++;\n\n\t\tif (time > _prevTime + MEASUREMENT_INTERVAL) {\n\t\t\tcurrentMs = Math.round(time - _startTime);\n\n\t\t\t_ui.setMs(currentMs);\n\n\t\t\tcurrentFps = Math.round((_ticks * 1000) / (time - _prevTime));\n\t\t\t_fpsMin = Math.min(_fpsMin, currentFps);\n\t\t\t_fpsMax = Math.max(_fpsMax, currentFps);\n\t\t\t_ui.setFps(currentFps);\n\n\t\t\t_prevTime = time;\n\t\t\t_ticks = 0;\n\n\t\t\tif (_memCheck) {\n\t\t\t\tcurrentMem = _getFormattedSize(_memoryObj.usedJSHeapSize, 2);\n\t\t\t\t_ui.setMem(currentMem);\n\t\t\t}\n\t\t}\n\t\t_startTime = time;\n\n\t\t_win.requestAnimationFrame(cast _tick);\n\t}\n\n\tfunction _getFormattedSize(bytes:Float, ?frac:Int = 0):String {\n\t\tvar sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n\t\tif (bytes == 0) return \"0\";\n\t\tvar precision = Math.pow(10, frac);\n\t\tvar i = Math.floor(Math.log(bytes) / Math.log(1024));\n\t\treturn Math.round(bytes * precision / Math.pow(1024, i)) / precision + \" \" + sizes[i];\n\t}\n\n\tpublic function destroy() {\n\t\t_ui.destroy();\n\t}\n}","import js.html.PerformanceResourceTiming;\nimport dat.controllers.Controller;\nimport dat.gui.GUI;\n\nclass PerfUI {\n\n\tvar _menu:GUI;\n\tvar _data:Dynamic;\n\tvar _types:Dynamic;\n\tvar _fileData:Dynamic;\n\tvar _resourcesData:Array<PerformanceResourceTiming>;\n\n\tpublic var resourceCount(default, null):Int;\n\tpublic var loadDuration(default, null):Float;\n\n\tpublic function new() {\n\t\tresourceCount = 0;\n\t\tloadDuration = 0;\n\t\t_data = { FPS: 0, MS: 0, MEMORY: \"0\" };\n\t\t_menu = new GUI();\n\t\t_menu.add(_data, \"FPS\", 1, 60).listen();\n\t\t_menu.add(_data, \"MS\").listen();\n\t\t_menu.add(_data, \"MEMORY\").listen();\n\t}\n\n\tpublic function setFps(val:Float) {\n\t\tif (val >= 0) _data.FPS = val;\n\t}\n\n\tpublic function setMs(val:Float) {\n\t\tif (val >= 0) _data.MS = val;\n\t}\n\n\tpublic function setMem(val:String) {\n\t\t_data.MEMORY = val;\n\t}\n\n\tpublic function addResources(data:Array<PerformanceResourceTiming>) {\n\t\tvar folder = _menu.addFolder(\"RESOURCE COUNT\");\n\t\t_resourcesData = data;\n\t\tresourceCount = data.length;\n\t\tvar resources = { TOTAL: data.length, types: [], files: [] };\n\t\t_types = { count: 0, duration: 0 };\n\n\t\tfolder.add(resources, \"TOTAL\");\n\n\t\tvar types:Array<String> = [];\n\t\tfor (res in data) {\n\t\t\tvar ext = res.name.substring(res.name.lastIndexOf(\".\") + 1, res.name.length);\n\t\t\tif (types.indexOf(ext) == -1) types.push(ext);\n\t\t}\n\n\t\tvar fileTypes = folder.add(resources, \"types\", types);\n\t\tfolder.add(_types, \"count\").listen();\n\t\tfolder.add(_types, \"duration\").listen();\n\t\tfileTypes.onChange(_typeStats);\n\t\t_typeStats(types[0]);\n\n\t\t_fileData = { duration: 0 };\n\t\tvar filesFolder = _menu.addFolder(\"ALL RESOURCES\");\n\t\tvar files:Array<String> = [];\n\t\tfor (res in data) {\n\t\t\tfiles.push(res.name);\n\t\t\tloadDuration += res.duration;\n\t\t}\n\t\tvar allFiles = filesFolder.add(resources, \"files\", files);\n\t\tfilesFolder.add(_fileData, \"duration\").listen();\n\t\tallFiles.onChange(_fileStats);\n\t\t_fileStats(files[0]);\n\t}\n\n\tfunction _typeStats(val) {\n\t\tvar count:Int = 0;\n\t\tvar duration:Float = 0;\n\t\tfor (res in _resourcesData) {\n\t\t\tvar ext = res.name.substring(res.name.lastIndexOf(\".\") + 1, res.name.length);\n\t\t\tif (ext == val) {\n\t\t\t\tcount++;\n\t\t\t\tduration += res.duration;\n\t\t\t}\n\t\t}\n\t\t_types.count = count;\n\t\t_types.duration = duration;\n\t}\n\n\tfunction _fileStats(val) {\n\t\tvar duration:Float = 0;\n\t\tfor (res in _resourcesData) {\n\t\t\tif (res.name == val) {\n\t\t\t\tduration += res.duration;\n\t\t\t}\n\t\t}\n\t\t_fileData.duration = duration;\n\t}\n\n\tpublic function destroy() {\n\t\t_menu.destroy();\n\t}\n}"],
"names":[],
"mappings":";;sBAiFO,JAAqD;CACjD;CACV,CAAI,CAAI,FAAG;EACV,EAAK;EACL,AAAI,CAAI,FAAG,EAAI;;CAEhB,IAAO,FAAI,FACX;EACC,AAAY,DACX,MAAO;EACR;;CAED,MAAO;;uBChED;;;CACN,EAAa;CACb,EAAY;CACZ,EAAa;CAEb,EAAO;CACP,EAAU;CACV,EAAQ;CACR,EAAS;CACT,EAAU;CACV,EAAU;CACG,AAAb,EAAa,GAAb,HAAa;CACb,EAAY,FAAC;;;OAGP,OAA4B;EAClC,CAAM;EACN,AAAI,EAAO,HAAM,EAAM;EACvB,CAAO;EAEP,CAAW,AAAK;EAChB,CAAa;EACb,CAAY,AAAC,CAAY,AAAQ,AAAc,AAAQ,DAA6B;EAEpF,DAA2B,AAAK;EAEhC,AAAY,EAAiD,HAAM;GAClE,FAAiB,AAA0B;GAC3C,AAAgB;GAChB,AAAe;;;MAIV,KACN;EAAO,DAAC,GAAY,AAAQ,AAAgB,HAA5C,MAAoD,DAApD,CAAqE;;OAGtE,IAAiB;EACL;;EACX;EAEA,AAAI,CAAO,AAAY,FAAsB;GAC5C,AAAY,FAAW,EAAO;GAE9B,FAAU;GAEV,AAAa,FAAW,AAAC,EAAS,AAAQ,FAAC,EAAO;GAClD,AAAU,FAAS,AAAS;GAC5B,AAAU,FAAS,AAAS;GAC5B,FAAW;GAEX,AAAY;GACZ,AAAS;GAET,DAAI,DAAW;IACd,DAAa,FAAkB,AAA2B;IAC1D,HAAW;;;EAGb,CAAa;EAEb,DAA2B,AAAK;;mBAGjC;;EACa,DAAC,AAAS,AAAM,AAAM,AAAM;EACxC,AAAI,EAAS,HAAG,MAAO;EACP,DAAS,AAAI;EACrB,DAAW,AAAS,EAAS,FAAS;EAC9C,KAAO,NAAW,EAAQ,AAAY,FAAS,AAAM,EAAM,AAAY,AAAM,FAAM;;SAG7E,EACN;;;;SCvFM,EAAe;CACrB,EAAgB;CAChB,EAAe;CACf,EAAQ,GAAO,DAAO,IAAW;CACjC,EAAQ;CACR,AAAU,AAAO,AAAO,AAAG;CAC3B,AAAU,AAAO;CACjB,AAAU,AAAO;;;QAGX,MACN;EAAI,EAAO,HAAG,EAAY;;OAGpB,OACN;EAAI,EAAO,HAAG,EAAW;;QAGnB,MACN;GAAe;;cAGT,CAA6D;EACtD,DAAgB;EAC7B,CAAiB;EACjB,CAAgB;EACA,MAAS,AAAoB,AAAW;EACxD,CAAS,KAAS,GAAa;EAE/B,DAAW,AAAW;EAEI;EAC1B;GAAY,FAAM;GAAlB,AAAY,FAAZ;;GACW,FAAmB,AAAqB,EAAO,FAAG;GAC5D,DAAI,DAAc,AAAd,GAAsB,HAAI,AAAW;;EAG1B,DAAW,AAAW,AAAS;EAC/C,DAAW,AAAQ;EACnB,DAAW,AAAQ;EACnB,DAAmB;EACnB,DAAW,AAAM;EAEjB,CAAY,QAAY;EACN,DAAgB;EACR;EAC1B;GAAY,FAAM;GAAlB,AAAY,FAAZ;;GACC,FAAW;GACX,CAAgB;;EAEF,DAAgB,AAAW,AAAS;EACnD,DAAgB,AAAW;EAC3B,DAAkB;EAClB,DAAW,AAAM;;YAGlB,EAAyB;EACR;EACK;EACrB;EAAY;EAAZ,CAAY,FAAgB;GAA5B,AAAY,FAAZ;;GACW,FAAmB,AAAqB,EAAO,FAAG;GAC5D,DAAI,EAAO,HAAK;IACf;IACA,AAAY;;;EAGd,CAAe;EACf,CAAkB;;YAGnB,EAAyB;EACH;EACrB;EAAY;EAAZ,CAAY,FAAgB;GAA5B,AAAY,FAAZ;;GACC,DAAI,EAAY,HACf,GAAY;;EAGd,CAAqB;;SAGf,EACN;;;;;;AFqCmC,EAAI,DAA0B,EAAgC,aAAgB;OAAO,NAA6B,AAAG,AAAG;;gCC/H/G;;;"
}